// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var camera;
	var scene;
	var projector;
	var renderer;
	var mouse_y;
	var mouse_x = 0.0;
	mouse_y = 0.0;
	var objects = [];
	var INTERSECTED = null;
	var container = window.document.createElement("div");
	window.document.body.appendChild(container);
	var info = window.document.createElement("div");
	info.style.position = "absolute";
	info.style.top = "10px";
	info.style.width = "100%";
	info.style.textAlign = "center";
	info.innerHTML = "<a href=\"http://github.com/mrdoob/three.js\" target=\"_blank\">three.js</a> webgl - interactive cubes";
	container.appendChild(info);
	camera = new THREE.PerspectiveCamera(70,window.innerWidth / window.innerHeight,1,10000);
	camera.position.set(0,300,500);
	scene = new THREE.Scene();
	scene.add(camera);
	var light = new THREE.DirectionalLight(16777215,2);
	light.position.set(1,1,1).normalize();
	scene.add(light);
	var light = new THREE.DirectionalLight(16777215);
	light.position.set(-1,-1,-1).normalize();
	scene.add(light);
	var geometry = new THREE.CubeGeometry(20,20,20);
	var _g = 0;
	while(_g < 500) {
		var i = _g++;
		var object = new THREE.Mesh(geometry,new THREE.MeshLambertMaterial({ color : Math.round(Math.random() * 16777215)}));
		var tmp = Math.random() * 800;
		object.position.x = tmp - 400;
		var tmp1 = Math.random() * 800;
		object.position.y = tmp1 - 400;
		var tmp2 = Math.random() * 800;
		object.position.z = tmp2 - 400;
		var tmp3 = Math.random() * 360 * Math.PI;
		object.rotation.x = tmp3 / 180;
		var tmp4 = Math.random() * 360 * Math.PI;
		object.rotation.y = tmp4 / 180;
		var tmp5 = Math.random() * 360 * Math.PI;
		object.rotation.z = tmp5 / 180;
		var tmp6 = Math.random() * 2;
		object.scale.x = tmp6 + 1;
		var tmp7 = Math.random() * 2;
		object.scale.y = tmp7 + 1;
		var tmp8 = Math.random() * 2;
		object.scale.z = tmp8 + 1;
		scene.add(object);
		objects.push(object);
	}
	projector = new THREE.Projector();
	renderer = new THREE.WebGLRenderer();
	renderer.sortObjects = false;
	renderer.setSize(window.innerWidth,window.innerHeight);
	container.appendChild(renderer.domElement);
	window.document.addEventListener("mousemove",function(event) {
		event.preventDefault();
		mouse_x = event.clientX / window.innerWidth * 2 - 1;
		mouse_y = -(event.clientY / window.innerHeight) * 2 + 1;
	},false);
	var radius = 100;
	var theta = 0.0;
	var timer = new haxe_Timer(Math.round(16.666666666666668));
	timer.run = function() {
		theta += 0.2;
		camera.position.x = radius * Math.sin(theta * Math.PI / 360);
		camera.position.y = radius * Math.sin(theta * Math.PI / 360);
		camera.position.z = radius * Math.cos(theta * Math.PI / 360);
		camera.lookAt(scene.position);
		var vector = new THREE.Vector3(mouse_x,mouse_y,1);
		projector.unprojectVector(vector,camera);
		var raycaster = new THREE.Raycaster(camera.position,vector.sub(camera.position).normalize());
		var intersects = raycaster.intersectObjects(objects);
		if(intersects.length > 0) {
			if(INTERSECTED != intersects[0].object) {
				if(INTERSECTED != null) {
					INTERSECTED.material.color.setHex(INTERSECTED.currentHex);
				}
				INTERSECTED = intersects[0].object;
				INTERSECTED.currentHex = INTERSECTED.material.color.getHex();
				INTERSECTED.material.color.setHex(16711680);
			}
		} else {
			if(INTERSECTED != null) {
				INTERSECTED.material.color.setHex(INTERSECTED.currentHex);
			}
			INTERSECTED = null;
		}
		renderer.render(scene,camera);
	};
};
Math.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_three_ArrayLike = {};
js_three_ArrayLike.get = function(this1,key) {
	return this1[key];
};
js_three_ArrayLike.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.main();
})({});
