// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var camera = new THREE.PerspectiveCamera(20,window.innerWidth / window.innerHeight,1,10000);
	camera.position.z = 1800;
	var scene = new THREE.Scene();
	var light = new THREE.DirectionalLight(16777215);
	light.position.set(0,0,1);
	light.position.normalize();
	scene.add(light);
	var textureLoader = new THREE.TextureLoader();
	var shadowMaterial = new THREE.MeshBasicMaterial({ map : textureLoader.load("shadow.png")});
	var shadowGeo = new THREE.PlaneGeometry(300,300,1,1);
	var mesh = new THREE.Mesh(shadowGeo,shadowMaterial);
	mesh.position.y = -250;
	mesh.position.x = -90 * Math.PI / 180;
	scene.add(mesh);
	var mesh = new THREE.Mesh(shadowGeo,shadowMaterial);
	mesh.position.y = -250;
	mesh.position.x = -400;
	mesh.position.x = -90 * Math.PI / 180;
	scene.add(mesh);
	var mesh = new THREE.Mesh(shadowGeo,shadowMaterial);
	mesh.position.y = -250;
	mesh.position.x = 400;
	mesh.position.x = -90 * Math.PI / 180;
	scene.add(mesh);
	var faceIndices = ["a","b","c","d"];
	var color;
	var f;
	var f2;
	var f3;
	var p;
	var n;
	var vertexIndex;
	var radius = 200;
	var geometry = new THREE.IcosahedronGeometry(radius,1);
	var geometry2 = new THREE.IcosahedronGeometry(radius,1);
	var geometry3 = new THREE.IcosahedronGeometry(radius,1);
	var _g = 0;
	var _g1 = geometry.faces.length;
	while(_g < _g1) {
		var i = _g++;
		f = geometry.faces[i];
		f2 = geometry2.faces[i];
		f3 = geometry3.faces[i];
		n = ((f) instanceof THREE.Face3) ? 3 : 4;
		var _g2 = 0;
		var _g3 = n;
		while(_g2 < _g3) {
			var j = _g2++;
			vertexIndex = Reflect.field(f,faceIndices[j]);
			p = geometry.vertices[vertexIndex];
			color = new THREE.Color(16777215);
			color.setHSL((p.y / radius + 1) / 2,1.0,0.5);
			f.vertexColors[j] = color;
			color = new THREE.Color(16777215);
			color.setHSL(0,(p.y / radius + 1) / 2,0.5);
			f2.vertexColors[j] = color;
			color = new THREE.Color(16777215);
			color.setHSL(0.125 * vertexIndex / geometry.vertices.length,1,0.5);
			f3.vertexColors[j] = color;
		}
	}
	var materials = [new THREE.MeshLambertMaterial({ color : 16777215, vertexColors : THREE.VertexColors}),new THREE.MeshLambertMaterial({ color : 0, wireframe : true, transparent : true})];
	var group1 = THREE.SceneUtils.createMultiMaterialObject(geometry,materials);
	group1.position.x = -400;
	group1.rotation.x = -1.87;
	scene.add(group1);
	var group2 = THREE.SceneUtils.createMultiMaterialObject(geometry2,materials);
	group2.position.x = 400;
	group2.rotation.x = 0;
	scene.add(group2);
	var group3 = THREE.SceneUtils.createMultiMaterialObject(geometry3,materials);
	group3.position.x = 0;
	group3.rotation.x = 0;
	scene.add(group3);
	var renderer = new THREE.WebGLRenderer({ antialias : true, alpha : true});
	renderer.setSize(window.innerWidth,window.innerHeight);
	window.document.body.appendChild(renderer.domElement);
	var mouseX = 0;
	var mouseY = 0;
	window.document.addEventListener("mousemove",function(event) {
		mouseX = Math.round(event.clientX - window.innerWidth / 2);
		mouseY = Math.round(event.clientY - window.innerHeight / 2);
	},false);
	var timer = new haxe_Timer(Math.round(16.666666666666668));
	timer.run = function() {
		camera.position.x += (mouseX - camera.position.x) * 0.05;
		camera.position.y += (-mouseY - camera.position.y) * 0.05;
		camera.lookAt(scene.position);
		renderer.render(scene,camera);
	};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_three_ArrayLike = {};
js_three_ArrayLike.get = function(this1,key) {
	return this1[key];
};
js_three_ArrayLike.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.main();
})({});
