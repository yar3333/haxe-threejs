ID = \b[_a-zA-Z][_a-zA-Z0-9]*\b
TYPE = (?:(?:ID|\{[^}]*\})(?:\[\])*\s*)
TYPE_COMPLEX = (?:TYPE|\(ID\s[:]\s*TYPE(?:,\s*ID\s[:]\s*TYPE)\)\s*=>\s*TYPE)


/////////////////////////////////
// fix overloads
//    1                2         3                           4                     5            6
/\n([ \t]*)function\s+(ID)\s*\((.*?)\n\s*function\s+\2\s*\(([^)]*)\)\s*[:]\s*(TYPE_COMPLEX)\s*;(.*)$/\n$1@:overload(function($4):$5{})\n$1function $2($3$6/sr


/////////////////////////////////
// package & native

/^/package js.three;\n\nimport js.html.*;\n\n
/(extern\s+(?:class|interface|enum)\s+)(ID)/@:native("THREE.$2")\n$1$2


/////////////////////////////////
// vars

/((?:\b)hex\s*:\s*)Float\b/$1Int/
/((?:\b)color\s*:\s*)Float\b/$1Int/
/((?:\b)index\s*:\s*)Float\b/$1Int/
/((?:\b)interpoltionType\s*:\s*)Float\b/$1Int/
/((?:\b)id\s*:\s*)Float\b/$1Int/
/((?:\b)vertices\s*:\s*)Float\b/$1Int/
/((?:\b)faces\s*:\s*)Float\b/$1Int/
/((?:\b)segments\s*:\s*)Float\b/$1Int/
/((?:\b)format\s*:\s*)Float\b/$1Int/
/((?:\b)type\s*:\s*)Float\b/$1Int/
/((?:\b)wrapS\s*:\s*)Float\b/$1Int/
/((?:\b)wrapT\s*:\s*)Float\b/$1Int/
/((?:\b)magFilter\s*:\s*)Float\b/$1Int/
/((?:\b)minFilter\s*:\s*)Float\b/$1Int/
/((?:\b)anisotropy\s*:\s*)Float\b/$1Int/
/((?:\b)divisions\s*:\s*)Float\b/$1Int/
/((?:\b)count\s*:\s*)Float\b/$1Int/
/((?:\b)vi1\s*:\s*)Float\b/$1Int/
/((?:\b)vi2\s*:\s*)Float\b/$1Int/
/((?:\b)n\s*:\s*)Float\b/$1Int/
/((?:\b)loaded\s*:\s*)Float\b/$1Int/
/((?:\b)total\s*:\s*)Float\b/$1Int/
/((?:\b)curveSegments\s*:\s*)Float\b/$1Int/
/(Count\s*:\s*)Float\b/$1Int/
/(Index\s*:\s*)Float\b/$1Int/
/(Type\s*:\s*)Float\b/$1Int/

///(class\s+CanvasRenderer.+\bvar\s+width\s*:\s*Float)/$1Int/
///(class\s+AreaLight.+\bvar\s+height\s*:\s*Float)/$1Int/


/////////////////////////////////
// arrays

/(Width\s*:\s*)Array<Float>\b/$1Array<Int>/
/(Height\s*:\s*)Array<Float>\b/$1Array<Int>/
/(Indices\s*:\s*)Array<Float>\b/$1Array<Int>/


/////////////////////////////////
// functions return values

/(function\s+getMaxAnisotropy\(\)\s*:\s*)Float\b/$1Int/
/(function\s+getHex\(\)\s*:\s*)Float\b/$1Int/


/////////////////////////////////
// functions agrs

/((?:function\s+getNextKeyWith\([^)]*\b)h:\s*)Float/$1Int/
/((?:function\s+getNextKeyWith\([^)]*\b)key:\s*)Float/$1Int/
/((?:function\s+getPrevKeyWith\([^)]*\b)h:\s*)Float/$1Int/
/((?:function\s+getPrevKeyWith\([^)]*\b)key:\s*)Float/$1Int/


/////////////////////////////////
// special fixes

/static function slerp\(qa:Quaternion, qb:Quaternion, qm:Quaternion, t:Float\) : Quaternion;/static inline function slerp_(qa:Quaternion, qb:Quaternion, qm:Quaternion, t:Float) : Quaternion return untyped js.three.Quaternion.slerp(qa, qb, qm, t);/
/var dynamic : Bool;/inline function dynamicGet() : Bool return untyped this["dynamic"];/

~(class Vector4\s+.*)\}\s*$~$1\n\t/**\n\t * Unsupported.\n\t */\n\tfunction distanceTo(v:Vector) : Float;\n}~s
~(class Vector4\s+.*)\}\s*$~$1\n\t/**\n\t * Unsupported.\n\t */\n\tfunction distanceToSquared(v:Vector) : Float;\n}~s

/\binterface( JSonLoaderResultGeometry\b)/class$1/


/////////////////////////////////
// "[name:String] : T" => "implements Dynamic<T>"
//             1              2                                             3
/((?:interface|class)\s+ID)(\s*\{\s*)\[name\s*:\s*(?:String|Int)\]\s*:\s*(TYPE)\s*;\s*/$1 implements Dynamic<$3>$2/s
